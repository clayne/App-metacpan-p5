#compdef metacpan

_metacpan() {
    local program=metacpan
    typeset -A opt_args
    local curcontext="$curcontext" state line context


        # ---- Command: 
        _arguments -s  \
            '1: :->cmd1' \
            '*: :->args' \
            && ret=0


        case $state in
        cmd1)
            _alternative 'args:cmd2:((author\:"Author" help\:"Show command help"))'
        ;;

        args)
            case $line[1] in
            _meta)

                # ---- Command: _meta
                _arguments -s -C \
                    '1: :->cmd1' \
                    '2: :->cmd2' \
                    '*: :->args' \
                    && ret=0


                case $state in
                cmd2)
                    _alternative 'args:cmd3:((completion\:"Shell completion functions" pod\:"Pod documentation"))'
                ;;

                args)
                    case $line[2] in
                    completion)

                        # ---- Command: _meta completion
                        _arguments -s -C \
                            '1: :->cmd1' \
                            '2: :->cmd2' \
                            '3: :->cmd3' \
                            '*: :->args' \
                            && ret=0


                        case $state in
                        cmd3)
                            _alternative 'args:cmd4:((generate\:"Generate self completion"))'
                        ;;

                        args)
                            case $line[3] in
                            generate)

                                # ---- Command: _meta completion generate
                                _arguments -s -C \
                                    '1: :->cmd1' \
                                    '2: :->cmd2' \
                                    '3: :->cmd3' \
                                    '--verbose[Be verbose]' \
                                    '-v[Be verbose]' \
                                    '--help[Show command help]' \
                                    '-h[Show command help]' \
                                    '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                                    '--name[name of the program (optional, override name in spec)]:name' \
                                    '--zsh[for zsh]' \
                                    '--bash[for bash]' \
                                    && ret=0


                            ;;
                            esac

                        ;;

                        esac
                    ;;
                    pod)

                        # ---- Command: _meta pod
                        _arguments -s -C \
                            '1: :->cmd1' \
                            '2: :->cmd2' \
                            '3: :->cmd3' \
                            '*: :->args' \
                            && ret=0


                        case $state in
                        cmd3)
                            _alternative 'args:cmd4:((generate\:"Generate self pod"))'
                        ;;

                        args)
                            case $line[3] in
                            generate)

                                # ---- Command: _meta pod generate
                                _arguments -s -C \
                                    '1: :->cmd1' \
                                    '2: :->cmd2' \
                                    '3: :->cmd3' \
                                    '--verbose[Be verbose]' \
                                    '-v[Be verbose]' \
                                    '--help[Show command help]' \
                                    '-h[Show command help]' \
                                    '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                                    && ret=0


                            ;;
                            esac

                        ;;

                        esac
                    ;;
                    esac

                ;;

                esac
            ;;
            author)

                # ---- Command: author
                _arguments -s -C \
                    '1: :->cmd1' \
                    '2: :->cmd2' \
                    '*: :->args' \
                    && ret=0


                case $state in
                cmd2)
                    _alternative 'args:cmd3:((info\:"Author info" releases\:"Releases by author"))'
                ;;

                args)
                    case $line[2] in
                    info)

                        # ---- Command: author info
                        _arguments -s -C \
                            '1: :->cmd1' \
                            '2: :->cmd2' \
                            '3: :->handle' \
                            '--verbose[Be verbose]' \
                            '-v[Be verbose]' \
                            '--help[Show command help]' \
                            '-h[Show command help]' \
                            '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                            && ret=0

                        case $state in
                        handle)
_metacpan_author_info_param_handle_completion
                        ;;
                        esac

                    ;;
                    releases)

                        # ---- Command: author releases
                        _arguments -s -C \
                            '1: :->cmd1' \
                            '2: :->cmd2' \
                            '3: :->handle' \
                            '--verbose[Be verbose]' \
                            '-v[Be verbose]' \
                            '--help[Show command help]' \
                            '-h[Show command help]' \
                            '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                            '--fields[List of field names]:fields:_metacpan_author_releases_option_fields_completion' \
                            && ret=0

                        case $state in
                        handle)
_metacpan_author_releases_param_handle_completion
                        ;;
                        esac

                    ;;
                    esac

                ;;

                esac
            ;;
            help)

                # ---- Command: help
                _arguments -s -C \
                    '1: :->cmd1' \
                    '2: :->cmd2' \
                    '*: :->args' \
                    && ret=0


                case $state in
                cmd2)
                    _alternative 'args:cmd3:((author))'
                ;;

                args)
                    case $line[2] in
                    _meta)

                        # ---- Command: help _meta
                        _arguments -s -C \
                            '1: :->cmd1' \
                            '2: :->cmd2' \
                            '3: :->cmd3' \
                            '*: :->args' \
                            && ret=0


                        case $state in
                        cmd3)
                            _alternative 'args:cmd4:((completion pod))'
                        ;;

                        args)
                            case $line[3] in
                            completion)

                                # ---- Command: help _meta completion
                                _arguments -s -C \
                                    '1: :->cmd1' \
                                    '2: :->cmd2' \
                                    '3: :->cmd3' \
                                    '4: :->cmd4' \
                                    '*: :->args' \
                                    && ret=0


                                case $state in
                                cmd4)
                                    _alternative 'args:cmd5:((generate))'
                                ;;

                                args)
                                    case $line[4] in
                                    generate)

                                        # ---- Command: help _meta completion generate
                                        _arguments -s -C \
                                            '1: :->cmd1' \
                                            '2: :->cmd2' \
                                            '3: :->cmd3' \
                                            '4: :->cmd4' \
                                            '--verbose[Be verbose]' \
                                            '-v[Be verbose]' \
                                            '--help[Show command help]' \
                                            '-h[Show command help]' \
                                            '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                                            '--all[]' \
                                            && ret=0


                                    ;;
                                    esac

                                ;;

                                esac
                            ;;
                            pod)

                                # ---- Command: help _meta pod
                                _arguments -s -C \
                                    '1: :->cmd1' \
                                    '2: :->cmd2' \
                                    '3: :->cmd3' \
                                    '4: :->cmd4' \
                                    '*: :->args' \
                                    && ret=0


                                case $state in
                                cmd4)
                                    _alternative 'args:cmd5:((generate))'
                                ;;

                                args)
                                    case $line[4] in
                                    generate)

                                        # ---- Command: help _meta pod generate
                                        _arguments -s -C \
                                            '1: :->cmd1' \
                                            '2: :->cmd2' \
                                            '3: :->cmd3' \
                                            '4: :->cmd4' \
                                            '--verbose[Be verbose]' \
                                            '-v[Be verbose]' \
                                            '--help[Show command help]' \
                                            '-h[Show command help]' \
                                            '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                                            '--all[]' \
                                            && ret=0


                                    ;;
                                    esac

                                ;;

                                esac
                            ;;
                            esac

                        ;;

                        esac
                    ;;
                    author)

                        # ---- Command: help author
                        _arguments -s -C \
                            '1: :->cmd1' \
                            '2: :->cmd2' \
                            '3: :->cmd3' \
                            '*: :->args' \
                            && ret=0


                        case $state in
                        cmd3)
                            _alternative 'args:cmd4:((info releases))'
                        ;;

                        args)
                            case $line[3] in
                            info)

                                # ---- Command: help author info
                                _arguments -s -C \
                                    '1: :->cmd1' \
                                    '2: :->cmd2' \
                                    '3: :->cmd3' \
                                    '--verbose[Be verbose]' \
                                    '-v[Be verbose]' \
                                    '--help[Show command help]' \
                                    '-h[Show command help]' \
                                    '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                                    '--all[]' \
                                    && ret=0


                            ;;
                            releases)

                                # ---- Command: help author releases
                                _arguments -s -C \
                                    '1: :->cmd1' \
                                    '2: :->cmd2' \
                                    '3: :->cmd3' \
                                    '--verbose[Be verbose]' \
                                    '-v[Be verbose]' \
                                    '--help[Show command help]' \
                                    '-h[Show command help]' \
                                    '--format[Format output]:format:("JSON" "YAML" "Table" "Data__Dumper" "Data__Dump")' \
                                    '--all[]' \
                                    && ret=0


                            ;;
                            esac

                        ;;

                        esac
                    ;;
                    esac

                ;;

                esac
            ;;
            esac

        ;;

        esac

}

_metacpan_author_info_param_handle_completion() {
    local __dynamic_completion
    __dynamic_completion=`PERL5_APPSPECRUN_SHELL=zsh PERL5_APPSPECRUN_COMPLETION_PARAMETER='handle' "${words[@]}"`
    __metacpan_dynamic_comp 'handle' "$__dynamic_completion"
}
_metacpan_author_releases_param_handle_completion() {
    local __dynamic_completion
    __dynamic_completion=`PERL5_APPSPECRUN_SHELL=zsh PERL5_APPSPECRUN_COMPLETION_PARAMETER='handle' "${words[@]}"`
    __metacpan_dynamic_comp 'handle' "$__dynamic_completion"
}
_metacpan_author_releases_option_fields_completion() {
    local __dynamic_completion
    __dynamic_completion=`PERL5_APPSPECRUN_SHELL=zsh PERL5_APPSPECRUN_COMPLETION_PARAMETER='fields' "${words[@]}"`
    __metacpan_dynamic_comp 'fields' "$__dynamic_completion"
}

__metacpan_dynamic_comp() {
    local argname="$1"
    local arg="$2"
    local comp="arg:$argname:(("
    local line
    while read -r line; do
        local name="$line"
        local desc="$line"
        name="${name%$'\t'*}"
        desc="${desc/*$'\t'}"
        comp="$comp$name"
        if [[ -n "$desc" && "$name" != "$desc" ]]; then
            comp="$comp\\:"'"'"$desc"'"'
        fi
        comp="$comp "
    done <<< "$arg"

    comp="$comp))"
    _alternative "$comp"
}

